# Generated by Django 2.0.2 on 2019-10-28 15:46

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, help_text='姓名', max_length=30, null=True, verbose_name='姓名')),
                ('mobile', models.CharField(blank=True, help_text='手机号', max_length=11, null=True, verbose_name='电话')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=100, null=True, verbose_name='邮箱')),
                ('openid', models.CharField(default=0, help_text='微信的唯一标识符', max_length=30, verbose_name='微信ID')),
                ('session_key', models.CharField(default=0, help_text='微信的session_key', max_length=30, verbose_name='微信的session_key')),
                ('password', models.CharField(help_text='微信的密码', max_length=100, verbose_name='用户的密码')),
                ('position', models.CharField(blank=True, choices=[('superuser', '超级管理员'), ('Investor', '投资人'), ('principal', '校长'), ('grade_director', '年级主任'), ('tearcher', '老师')], max_length=50, null=True, verbose_name='职位')),
                ('image', models.ImageField(blank=True, default='user/default.png', null=True, upload_to='user/images/%Y/%m')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalMenu',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='菜单名', max_length=30, verbose_name='菜单名')),
                ('icon', models.CharField(blank=True, help_text='图标', max_length=50, null=True, verbose_name='图标')),
                ('path', models.CharField(blank=True, help_text='连接地址', max_length=158, null=True, verbose_name='链接地址')),
                ('is_frame', models.BooleanField(default=False, help_text='外部菜单', verbose_name='外部菜单')),
                ('is_show', models.BooleanField(default=True, help_text='显示标记', verbose_name='显示标记')),
                ('sort', models.IntegerField(blank=True, help_text='排序标记', null=True, verbose_name='排序标记')),
                ('component', models.CharField(blank=True, help_text='组件', max_length=200, null=True, verbose_name='组件')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical 菜单',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='菜单名', max_length=30, unique=True, verbose_name='菜单名')),
                ('icon', models.CharField(blank=True, help_text='图标', max_length=50, null=True, verbose_name='图标')),
                ('path', models.CharField(blank=True, help_text='连接地址', max_length=158, null=True, verbose_name='链接地址')),
                ('is_frame', models.BooleanField(default=False, help_text='外部菜单', verbose_name='外部菜单')),
                ('is_show', models.BooleanField(default=True, help_text='显示标记', verbose_name='显示标记')),
                ('sort', models.IntegerField(blank=True, help_text='排序标记', null=True, verbose_name='排序标记')),
                ('component', models.CharField(blank=True, help_text='组件', max_length=200, null=True, verbose_name='组件')),
                ('pid', models.ForeignKey(blank=True, help_text='菜单层级', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.Menu', verbose_name='父菜单')),
            ],
            options={
                'verbose_name': '菜单',
                'verbose_name_plural': '菜单',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='名称')),
                ('type', models.CharField(choices=[('company', '公司'), ('department', '学校')], default='department', max_length=20, verbose_name='类型')),
                ('sort', models.IntegerField(blank=True, default=0, null=True, verbose_name='排序')),
                ('pid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.Organization', verbose_name='父类组织')),
            ],
            options={
                'verbose_name': '组织架构',
                'verbose_name_plural': '组织架构',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='权限', max_length=30, unique=True, verbose_name='权限名')),
                ('method', models.CharField(blank=True, help_text='方法', max_length=50, null=True, verbose_name='方法')),
                ('pid', models.ForeignKey(blank=True, help_text='父权限', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.Permission', verbose_name='父权限')),
            ],
            options={
                'verbose_name': '权限',
                'verbose_name_plural': '权限',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='角色', max_length=32, unique=True, verbose_name='角色')),
                ('desc', models.CharField(blank=True, help_text='描述', max_length=50, null=True, verbose_name='描述')),
                ('menus', models.ManyToManyField(blank=True, help_text='菜单', to='users.Menu', verbose_name='菜单')),
                ('permissions', models.ManyToManyField(blank=True, help_text='权限', to='users.Permission', verbose_name='权限')),
            ],
            options={
                'verbose_name': '角色',
                'verbose_name_plural': '角色',
            },
        ),
        migrations.AddField(
            model_name='historicalmenu',
            name='pid',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='菜单层级', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='users.Menu', verbose_name='父菜单'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='department',
            field=models.ManyToManyField(blank=True, null=True, related_name='user_department', to='users.Organization', verbose_name='学校'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='roles',
            field=models.ManyToManyField(blank=True, to='users.Role', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
